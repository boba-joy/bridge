name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  PYTHON_VERSION: "3.13"

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.13"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install dependencies
        run: poetry install

      - name: Run quality checks
        run: poetry run poe quality

      - name: Run tests with coverage
        run: poetry run poe test-cov

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: false

  test-examples:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install Bridge URL
        run: poetry install

      - name: Test example rules
        run: |
          echo "üîç Testing examples/rules.json"
          poetry run poe check
          poetry run poe build

      - name: Test deploy rules
        run: |
          echo "üîç Testing deploy/rules.json"
          poetry run poe check-rules deploy/rules.json
          poetry run poe build-rules deploy/rules.json --outdir deploy-output

      - name: Verify outputs
        run: |
          echo "üì¶ Generated files:"
          ls -la test-output/ deploy-output/
          echo ""
          echo "üìÑ Example _redirects:"
          cat test-output/_redirects
          echo ""
          echo "üìÑ Deploy _redirects:"
          cat deploy-output/_redirects

  build:
    runs-on: ubuntu-latest
    needs: [test, test-examples]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build package
        run: python -m build

      - name: Check package
        run: twine check dist/*

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: python-package
          path: dist/
          retention-days: 7

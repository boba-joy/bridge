[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "bridge-url"
version = "0.1.0"
description = "CLI tool for managing Netlify URL redirections with rule-based JSON configuration"
authors = ["Arkady <arkady@example.com>"]
readme = "README.md"
license = "MIT"
homepage = "https://github.com/arkady/bridge-url"
repository = "https://github.com/arkady/bridge-url"
documentation = "https://github.com/arkady/bridge-url#readme"
keywords = ["netlify", "redirects", "url", "cli", "devops"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
    "Topic :: Internet :: WWW/HTTP",
    "Topic :: Software Development :: Build Tools",
    "Topic :: System :: Systems Administration",
]
packages = [{include = "bridge", from = "src"}]

[tool.poetry.dependencies]
python = "^3.13"

[tool.poetry.group.dev.dependencies]
pytest = "^8.0"
pytest-cov = "^4.0"
pytest-mock = "^3.12"
ruff = "^0.8"
mypy = "^1.11"
pre-commit = "^3.6.0"
poethepoet = "^0.27"

[tool.poetry.scripts]
bridge = "bridge.cli:main"

# Poethepoetry tasks
[tool.poe.tasks]
# === Bridge Commands ===
check = { cmd = "python -m bridge check --rules examples/rules.json", help = "Validate example rules" }
build = { cmd = "python -m bridge build --rules examples/rules.json --outdir output", help = "Build artifacts from example rules" }
build-redirects = { cmd = "python -m bridge build --rules examples/rules.json --outdir output --artifacts redirects", help = "Build only _redirects file" }
build-toml = { cmd = "python -m bridge build --rules examples/rules.json --outdir output --artifacts toml", help = "Build only netlify.toml file" }

# === Custom rules ===
check-rules = { cmd = "python -m bridge check --rules", help = "Validate custom rules file (usage: poe check-rules <file>)" }
build-rules = { cmd = "python -m bridge build --rules", help = "Build from custom rules file (usage: poe build-rules <file> --outdir <dir>)" }

# === Testing ===
test = { cmd = "pytest tests/ -v", help = "Run all tests" }
test-unit = { cmd = "pytest tests/unit/ -v", help = "Run unit tests" }
test-integration = { cmd = "pytest tests/integration/ -v", help = "Run integration tests" }
test-cov = { cmd = "pytest tests/ --cov=bridge --cov-report=term-missing --cov-report=html", help = "Run tests with coverage" }
test-fast = { cmd = "pytest tests/unit/ -v -x", help = "Run unit tests (fail fast)" }

# === Code Quality ===
lint = { cmd = "ruff check src/ tests/", help = "Lint code" }
fix = { cmd = "ruff check src/ tests/ --fix", help = "Fix linting issues" }
format = { cmd = "ruff format src/ tests/", help = "Format code with Ruff" }
fmt-check = { cmd = "ruff format src/ tests/ --check", help = "Check code formatting" }
type = { cmd = "mypy src/", help = "Type check" }
quality = ["fmt-check", "lint", "type"]
style = ["format", "fix"]

# === Pre-commit ===
pre-commit-install = { cmd = "pre-commit install", help = "Install pre-commit hooks" }
pre-commit-run = { cmd = "pre-commit run --all-files", help = "Run pre-commit on all files" }

# === Build & Deploy ===
package = { cmd = "python -m build", help = "Build package" }
clean = { cmd = "rm -rf dist/ .coverage htmlcov/ .pytest_cache/ .mypy_cache/ .ruff_cache/ output/", help = "Clean generated files" }

# === Workflows ===
ready = ["quality", "test-cov", "package"]
ci = ["quality", "test-cov"]
demo = ["check", "build"]


# Ruff configuration
[tool.ruff]
target-version = "py313"
line-length = 88
src = ["src", "tests"]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "N",   # pep8-naming
    "S",   # bandit security
    "T20", # flake8-print
    "SIM", # flake8-simplify
    "RUF", # Ruff-specific rules
]
ignore = [
    "E501",  # line too long, handled by ruff format
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "S101",  # assert used (OK in tests)
    "T201",  # print statements (OK for CLI)
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**" = ["S101", "T201", "S603"]  # Allow assert, print, and subprocess in tests

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

# MyPy configuration
[tool.mypy]
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

# Pytest configuration
[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "-ra",
    "-q",
    "--strict-markers",
    "--strict-config",
    "--tb=short",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "slow: Slow tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__main__.py",
]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    "\\.\\.\\.",
]
show_missing = true
skip_covered = false
precision = 2

[tool.coverage.html]
directory = "htmlcov"
